name: Build and Deploy

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/openhealth-analytics-backend
  IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/openhealth-analytics-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preprocess data (generate processed_data)
        env:
          INPUT_DIR: input
          PROCESSED_DIR: processed_data
        run: |
          python export_health_data.py

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract backend image metadata
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BACKEND }}
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=tag

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}

      - name: Extract frontend image metadata
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_FRONTEND }}
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=tag

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ secrets.DEPLOY_SSH_HOST != '' }}
    steps:
      - name: Deploy via SSH using docker compose
        uses: appleboy/ssh-action@v1.0.3
        env:
          REGISTRY: ghcr.io
          IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/openhealth-analytics-backend:latest
          IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/openhealth-analytics-frontend:latest
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -euo pipefail
            sudo mkdir -p /opt/openhealth-analytics
            cd /opt/openhealth-analytics

            echo "Logging into GHCR..."
            echo "$GHCR_TOKEN" | sudo docker login $REGISTRY -u "$GHCR_USERNAME" --password-stdin

            echo "Writing docker-compose.yml..."
            cat > docker-compose.yml <<'COMPOSE'
            version: "3.9"
            services:
              backend:
                image: ${IMAGE_BACKEND}
                container_name: openhealth-backend
                environment:
                  - PROCESSED_DIR=/app/processed_data
                ports:
                  - "5001:5001"
                restart: unless-stopped

              frontend:
                image: ${IMAGE_FRONTEND}
                container_name: openhealth-frontend
                depends_on:
                  - backend
                ports:
                  - "80:80"
                restart: unless-stopped
            COMPOSE

            echo "Pulling latest images..."
            sudo docker compose pull

            echo "Starting services..."
            sudo docker compose up -d

            echo "Pruning old images..."
            sudo docker image prune -f